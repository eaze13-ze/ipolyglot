diff --git a/node_modules/nel/lib/nel.js b/node_modules/nel/lib/nel.js
index f2391d6..99b825b 100755
--- a/node_modules/nel/lib/nel.js
+++ b/node_modules/nel/lib/nel.js
@@ -43,7 +43,6 @@ module.exports = {
     Session: Session,
 };
 
-
 var spawn = require("child_process").spawn;
 var util = require("util");
 
@@ -199,7 +198,14 @@ Session._command = paths.node;
  * @member {String[]}
  * @private
  */
-Session._args = ["--eval", server]; // --eval workaround
+
+Session._args = [
+    "--polyglot", "--jvm",
+    // some useful flags for debugging, turn on if need be
+    "--inspect", "--inspect.Suspend=false", "--experimental-options", "--inspect.Internal=true",
+    // --eval workaround
+    "--eval", server
+]
 
 /**
  * Combination of a piece of code to be run within a session and all the
diff --git a/node_modules/nel/lib/server/main.js b/node_modules/nel/lib/server/main.js
index 6935d32..16006b5 100755
--- a/node_modules/nel/lib/server/main.js
+++ b/node_modules/nel/lib/server/main.js
@@ -45,6 +45,9 @@ var log;
 var requester;
 var initialContext;
 
+const PolyglotContext = Java.type('org.graalvm.polyglot.Context');
+const ByteArrayOutputStream = Java.type('java.io.ByteArrayOutputStream');
+
 // Init IPC server
 init();
 
@@ -313,6 +316,148 @@ function inspect(object) {
     }
 }
 
-function run(code) {
-    return vm.runInThisContext(code);
+
+function defaultLanguageStatements(variableName = '__i') {
+    // globalVariables: returning actual array raises error (see: https://github.com/graalvm/graaljs/issues/173)
+    // TODO: replace string repr with actual arrays
+    return {
+        'python': {
+            'importBindings': `import polyglot; bindings = polyglot.import_value("bindings")`,
+            'exportBindings': `import polyglot; polyglot.export_value(bindings, "bindings")`,
+            'importVariable': `${variableName} = bindings["${variableName}"]`,
+            'exportVariable': `bindings["${variableName}"] = ${variableName}`,
+            'globalVariables': `repr(list(globals().keys())).replace("'", '"')`,
+        },
+        'R': {
+            'importBindings': `bindings <- import("bindings")`,
+            'exportBindings': `export("bindings", bindings)`,
+            'importVariable': `${variableName} = bindings[["${variableName}"]]`,
+            'exportVariable': `bindings[["${variableName}"]] = ${variableName}`,
+            'globalVariables': `paste('["', paste(ls(all.names=TRUE), collapse='", "'), '"]', sep="")`,
+        },
+        'ruby': {
+            'importBindings': `$bindings = Polyglot.import("bindings")`,
+            'exportBindings': `Polyglot.export("bindings", $bindings)`,
+            'importVariable': `${variableName} = $bindings["${variableName}"]`,
+            'exportVariable': `$bindings["${variableName}"] = ${variableName}`,
+            'globalVariables': 'require "json"; global_variables.to_json',
+        },
+        'js': {
+            'importBindings': `bindings = Polyglot.import("bindings")`,
+            'exportBindings': `Polyglot.export("bindings", bindings)`,
+            'importVariable': `${variableName} = bindings["${variableName}"]`,
+            'exportVariable': `bindings["${variableName}"] = ${variableName}`,
+            'globalVariables': 'JSON.stringify(Object.keys(global))',
+        },
+    }
+}
+
+
+function loadGlobalVariables(language) {
+    // TODO: replace string repr with actual arrays (see: https://github.com/graalvm/graaljs/issues/173 and above)
+    return JSON.parse(Polyglot.eval(language, defaultLanguageStatements()[language]['globalVariables']));
+}
+
+
+function loadPolyglotBlacklist(language) {
+    let polyglotVariableBlacklist = null;
+    try {
+        polyglotVariableBlacklist = Polyglot.import('__polyglotVariableBlacklist');
+    } catch (e) {}
+
+    if (!polyglotVariableBlacklist) {
+        polyglotVariableBlacklist = {};
+    }
+
+    if (!polyglotVariableBlacklist[language]) {
+        let newPolyglotVariableBlacklist = loadGlobalVariables(language);
+        polyglotVariableBlacklist[language] = newPolyglotVariableBlacklist;
+        Polyglot.export('__polyglotVariableBlacklist', polyglotVariableBlacklist);
+    }
+
+    return polyglotVariableBlacklist[language];
+}
+
+
+function importPolyglotVariables(language) {
+    let variableList = null;
+    try {
+        variableList = Polyglot.import('bindings');
+    } catch (e) {}
+
+    if (!variableList) {
+        variableList = {};
+        Polyglot.export('bindings', variableList);
+    }
+
+    Polyglot.eval(language, defaultLanguageStatements()[language]['importBindings']);
+
+    for (let i of Object.keys(variableList)) {
+        try {
+            Polyglot.eval(language, defaultLanguageStatements(i)[language]['importVariable']);
+        } catch (e) {}
+    }
+}
+
+
+function exportPolyglotVariables(language) {
+    let polyglotVariableBlacklist = loadPolyglotBlacklist(language);
+    polyglotVariableBlacklist.push('bindings', '$bindings');
+
+    let newPolyglotVariables = loadGlobalVariables(language);
+    let newPolyglotVariablesWoBlacklisted = newPolyglotVariables.filter(x => !polyglotVariableBlacklist.includes(x));
+
+    for (let i of newPolyglotVariablesWoBlacklisted) {
+        Polyglot.eval(language, defaultLanguageStatements(i)[language]['exportVariable']);
+    }
+
+    Polyglot.eval(language, defaultLanguageStatements()[language]['exportBindings']);
+}
+
+
+function run(rawCode) {
+    const POLYGLOT_MAGIC_PATTERN = '%polyglot ';
+
+    if(rawCode.startsWith(POLYGLOT_MAGIC_PATTERN)) {
+        let polyglotStdout = new ByteArrayOutputStream();
+        let polyglotContext = PolyglotContext.newBuilder()
+            .out(polyglotStdout)
+            .allowAllAccess(true)
+            .build();
+
+        const rawCodeSplit = rawCode.split('\n');
+        const languageFromMagic = rawCodeSplit[0].replace(POLYGLOT_MAGIC_PATTERN, '');
+        const code = rawCodeSplit.slice(1).join('\n');
+
+        loadPolyglotBlacklist(languageFromMagic);
+        importPolyglotVariables(languageFromMagic);
+
+        let result, codeCellStdout, codeCellStderr;
+        try {
+            result = polyglotContext.eval(languageFromMagic, code);
+        } catch(e) {
+            codeCellStderr = e.getMessage();
+        } finally {
+            codeCellStdout = polyglotStdout.toString();
+            if (codeCellStdout.endsWith('\n')) {
+                codeCellStdout = codeCellStdout.slice(0, codeCellStdout.length - 1);
+            }
+            if (codeCellStdout !== undefined && codeCellStdout != '') {
+                initialContext.console.log(codeCellStdout);
+            }
+
+            if (codeCellStderr !== undefined) {
+                initialContext.console.error(codeCellStderr);
+            }
+        }
+
+        polyglotStdout.close();
+        polyglotContext.close();
+
+        exportPolyglotVariables(languageFromMagic);
+
+        return result;
+    }
+
+    return vm.runInThisContext(rawCode);
 }
diff --git a/node_modules/nel/package-lock.json b/node_modules/nel/package-lock.json
new file mode 100644
index 0000000..f6f4cd3
--- /dev/null
+++ b/node_modules/nel/package-lock.json
@@ -0,0 +1,13 @@
+{
+  "name": "nel",
+  "version": "1.1.0",
+  "lockfileVersion": 1,
+  "requires": true,
+  "dependencies": {
+    "tail": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/tail/-/tail-2.0.2.tgz",
+      "integrity": "sha512-raFipiKWdGKEzxbvZwnhUGqjvsv0gpa/1A479rL//NOxnNwYZDN4MPk6xJJdUFs8P2Xrff3nbH5fcyYRLU4UHQ=="
+    }
+  }
+}
