diff --git a/node_modules/nel/lib/nel.js b/node_modules/nel/lib/nel.js
index f2391d6..25cac74 100755
--- a/node_modules/nel/lib/nel.js
+++ b/node_modules/nel/lib/nel.js
@@ -43,7 +43,6 @@ module.exports = {
     Session: Session,
 };
 
-
 var spawn = require("child_process").spawn;
 var util = require("util");
 
@@ -155,6 +154,7 @@ function Session(nelConfig) {
      * @member {module:nel~Config}
      * @private
      */
+
     this._config = {
         cwd: nelConfig.cwd,
         stdio: global.DEBUG ?
@@ -199,7 +199,14 @@ Session._command = paths.node;
  * @member {String[]}
  * @private
  */
-Session._args = ["--eval", server]; // --eval workaround
+
+Session._args = [
+    "--polyglot", "--jvm",
+    // some useful flags for debugging, turn on if need be
+    "--inspect", "--inspect.Suspend=false", "--experimental-options", "--inspect.Internal=true",
+    // --eval workaround
+    "--eval", server
+]
 
 /**
  * Combination of a piece of code to be run within a session and all the
@@ -1187,6 +1194,8 @@ Session.prototype.inspect = function(code, cursorPos, callbacks) {
  *                                                 killed
  */
 Session.prototype.kill = function(signal, killCB) {
+    console.log('got kill signal');
+    process.stdout.write('got kill signal process');
     this._status = "dead";
     this._server.removeAllListeners();
     this._server.on("exit", (function(code, signal) {
@@ -1195,6 +1204,7 @@ Session.prototype.kill = function(signal, killCB) {
         }
     }).bind(this));
     this._server.kill(signal || "SIGTERM");
+    console.log('killing complete');
 };
 
 /**
diff --git a/node_modules/nel/lib/server/context.js b/node_modules/nel/lib/server/context.js
index 1718dc3..9e8bff5 100644
--- a/node_modules/nel/lib/server/context.js
+++ b/node_modules/nel/lib/server/context.js
@@ -83,7 +83,6 @@ function Context(requester, id) {
 
     this.stdout = new Stdout(this.id);
     this.stderr = new Stderr(this.id);
-    this.console = new console.Console(this.stdout, this.stderr);
 
     this._capturedStdout = null;
     this._capturedStderr = null;
@@ -301,23 +300,42 @@ Context.prototype.send = function send(message) {
     process.send(message);
 };
 
-Context.prototype.captureGlobalContext = function captureGlobalContext() {
-    this._capturedStdout = process.stdout;
-    this._capturedStderr = process.stderr;
-    this._capturedConsole = console;
+function hook(stdout, stderr) {
+    process.stdout.write = (function(write) {
+        return function(string, encoding, fd) {
+            var args = Array.from(arguments);
+            args[0] = interceptor( string, stdout);
+        };
+    }(process.stdout.write));
 
-    this.stdout.pipe(this._capturedStdout);
-    this.stderr.pipe(this._capturedStderr);
-    this.console.Console = this._capturedConsole.Console;
+    process.stderr.write = (function(write) {
+        return function(string, encoding, fd) {
+            var args = Array.from(arguments);
+            args[0] = interceptor( string, stderr);
+        };
+    }(process.stderr.write));
+}
 
-    delete process.stdout;
-    process.stdout = this.stdout;
+function interceptor(string, stream) {
+    // only intercept the string
+    var result = stream.write(string);
+    if (typeof result == 'string') {
+        string = result.replace( /\n$/ , '' ) + (result && (/\n$/).test( string ) ? '\n' : '');
+    }
+    return string;
+}
 
-    delete process.stderr;
-    process.stderr = this.stderr;
+function unhook(old_stdout_write, old_stderr_write) {
+    process.stdout.write = old_stdout_write;
+    process.stderr.write = old_stderr_write;
+};
 
-    delete global.console;
-    global.console = this.console;
+
+Context.prototype.captureGlobalContext = function captureGlobalContext() {
+    this._capturedStdout = process.stdout;
+    this._capturedStderr = process.stderr;
+    this._capturedConsole = console;
+    hook(this.stdout, this.stderr);
 
     delete global.$$;
     global.$$ = this.$$;
@@ -386,30 +404,7 @@ Context.prototype.captureGlobalContext = function captureGlobalContext() {
 };
 
 Context.prototype.releaseGlobalContext = function releaseGlobalContext() {
-    if (process.stdout === this.stdout) {
-        this.stdout.unpipe();
-
-        delete process.stdout;
-        process.stdout = this._capturedStdout;
-
-        this._capturedStdout = null;
-    }
-
-    if (process.stderr === this.stderr) {
-        this.stderr.unpipe();
-
-        delete process.stderr;
-        process.stderr = this._capturedStderr;
-
-        this._capturedStderr = null;
-    }
-
-    if (global.console === this.console) {
-        delete global.console;
-        global.console = this._capturedConsole;
-
-        this._capturedConsole = null;
-    }
+    unhook(this._capturedStdout, this._capturedStderr);
 };
 
 function formatError(error) {
diff --git a/node_modules/nel/lib/server/main.js b/node_modules/nel/lib/server/main.js
index 6935d32..710993b 100755
--- a/node_modules/nel/lib/server/main.js
+++ b/node_modules/nel/lib/server/main.js
@@ -313,6 +313,120 @@ function inspect(object) {
     }
 }
 
-function run(code) {
-    return vm.runInThisContext(code);
+
+function defaultLanguageStatements(variableName = '__i') {
+    // globalVariables: returning actual array raises error (see: https://github.com/graalvm/graaljs/issues/173)
+    // TODO: replace string repr with actual arrays
+    return {
+        'python': {
+            'importBindings': `import polyglot; bindings = polyglot.import_value("bindings")`,
+            'exportBindings': `import polyglot; polyglot.export_value(bindings, "bindings")`,
+            'importVariable': `${variableName} = bindings["${variableName}"]`,
+            'exportVariable': `bindings["${variableName}"] = ${variableName}`,
+            'globalVariables': `repr(list(globals().keys())).replace("'", '"')`,
+        },
+        'R': {
+            'importBindings': `bindings <- import("bindings")`,
+            'exportBindings': `export("bindings", bindings)`,
+            'importVariable': `${variableName} = bindings[["${variableName}"]]`,
+            'exportVariable': `bindings[["${variableName}"]] = ${variableName}`,
+            'globalVariables': `paste('["', paste(ls(all.names=TRUE), collapse='", "'), '"]', sep="")`,
+        },
+        'ruby': {
+            'importBindings': `$bindings = Polyglot.import("bindings")`,
+            'exportBindings': `Polyglot.export("bindings", $bindings)`,
+            'importVariable': `${variableName} = $bindings["${variableName}"]`,
+            'exportVariable': `$bindings["${variableName}"] = ${variableName}`,
+            'globalVariables': 'require "json"; global_variables.to_json',
+        },
+        'js': {
+            'importBindings': `bindings = Polyglot.import("bindings")`,
+            'exportBindings': `Polyglot.export("bindings", bindings)`,
+            'importVariable': `${variableName} = bindings["${variableName}"]`,
+            'exportVariable': `bindings["${variableName}"] = ${variableName}`,
+            'globalVariables': 'JSON.stringify(Object.keys(global))',
+        },
+    }
+}
+
+
+function loadGlobalVariables(language) {
+    // TODO: replace string repr with actual arrays (see: https://github.com/graalvm/graaljs/issues/173 and above)
+    return JSON.parse(Polyglot.eval(language, defaultLanguageStatements()[language]['globalVariables']));
+}
+
+
+function loadPolyglotBlacklist(language) {
+    let polyglotVariableBlacklist = null;
+    try {
+        polyglotVariableBlacklist = Polyglot.import('__polyglotVariableBlacklist');
+    } catch (e) {}
+
+    if (!polyglotVariableBlacklist) {
+        polyglotVariableBlacklist = {};
+    }
+
+    if (!polyglotVariableBlacklist[language]) {
+        let newPolyglotVariableBlacklist = loadGlobalVariables(language);
+        polyglotVariableBlacklist[language] = newPolyglotVariableBlacklist;
+        Polyglot.export('__polyglotVariableBlacklist', polyglotVariableBlacklist);
+    }
+
+    return polyglotVariableBlacklist[language];
+}
+
+
+function importPolyglotVariables(language) {
+    let variableList = null;
+    try {
+        variableList = Polyglot.import('bindings');
+    } catch (e) {}
+
+    if (!variableList) {
+        variableList = {};
+        Polyglot.export('bindings', variableList);
+    }
+
+    Polyglot.eval(language, defaultLanguageStatements()[language]['importBindings']);
+
+    for (let i of Object.keys(variableList)) {
+        try {
+            Polyglot.eval(language, defaultLanguageStatements(i)[language]['importVariable']);
+        } catch (e) {}
+    }
+}
+
+
+function exportPolyglotVariables(language) {
+    let polyglotVariableBlacklist = loadPolyglotBlacklist(language);
+    polyglotVariableBlacklist.push('bindings', '$bindings');
+
+    let newPolyglotVariables = loadGlobalVariables(language);
+    let newPolyglotVariablesWoBlacklisted = newPolyglotVariables.filter(x => !polyglotVariableBlacklist.includes(x));
+
+    for (let i of newPolyglotVariablesWoBlacklisted) {
+        Polyglot.eval(language, defaultLanguageStatements(i)[language]['exportVariable']);
+    }
+
+    Polyglot.eval(language, defaultLanguageStatements()[language]['exportBindings']);
+}
+
+
+function run(rawCode) {
+    const POLYGLOT_MAGIC_PATTERN = '%polyglot ';
+
+    if(rawCode.startsWith(POLYGLOT_MAGIC_PATTERN)) {
+        const rawCodeSplit = rawCode.split('\n');
+        const languageFromMagic = rawCodeSplit[0].replace(POLYGLOT_MAGIC_PATTERN, '');
+        const code = rawCodeSplit.slice(1).join('\n');
+
+        loadPolyglotBlacklist(languageFromMagic);
+        importPolyglotVariables(languageFromMagic);
+        const result = Polyglot.eval(languageFromMagic, code);
+        exportPolyglotVariables(languageFromMagic);
+
+        return result;
+    }
+
+    return vm.runInThisContext(rawCode);
 }
diff --git a/node_modules/nel/package-lock.json b/node_modules/nel/package-lock.json
new file mode 100644
index 0000000..f6f4cd3
--- /dev/null
+++ b/node_modules/nel/package-lock.json
@@ -0,0 +1,13 @@
+{
+  "name": "nel",
+  "version": "1.1.0",
+  "lockfileVersion": 1,
+  "requires": true,
+  "dependencies": {
+    "tail": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/tail/-/tail-2.0.2.tgz",
+      "integrity": "sha512-raFipiKWdGKEzxbvZwnhUGqjvsv0gpa/1A479rL//NOxnNwYZDN4MPk6xJJdUFs8P2Xrff3nbH5fcyYRLU4UHQ=="
+    }
+  }
+}
