diff --git a/node_modules/nel/lib/nel.js b/node_modules/nel/lib/nel.js
index f2391d6..05874d7 100755
--- a/node_modules/nel/lib/nel.js
+++ b/node_modules/nel/lib/nel.js
@@ -199,7 +199,9 @@ Session._command = paths.node;
  * @member {String[]}
  * @private
  */
-Session._args = ["--eval", server]; // --eval workaround
+// some useful flags for debugging, turn on if need be
+// Session._args = ["--polyglot", "--jvm", "--inspect", "--inspect.Suspend=false", "--experimental-options", "--inspect.Internal=true", "--eval", server]; // --eval workaround
+Session._args = ["--polyglot", "--jvm", "--eval", server]; // --eval workaround
 
 /**
  * Combination of a piece of code to be run within a session and all the
diff --git a/node_modules/nel/lib/server/main.js b/node_modules/nel/lib/server/main.js
index 6935d32..0942447 100755
--- a/node_modules/nel/lib/server/main.js
+++ b/node_modules/nel/lib/server/main.js
@@ -313,6 +313,42 @@ function inspect(object) {
     }
 }
 
-function run(code) {
+function run(rawCode) {
+    const POLYGLOT_MAGIC_PATTERN = '%polyglot ';
+
+    if(rawCode.startsWith(POLYGLOT_MAGIC_PATTERN)) {
+        const rawCodeSplit = rawCode.split('\n');
+        const firstLine = rawCodeSplit.shift();
+
+        const firstLineSplit = firstLine.split(' ');
+        const languageFromMagic = firstLineSplit[1];
+        const varsToBeExported = firstLineSplit.slice(2);
+
+        const code = rawCodeSplit.join('\n');
+
+        let varExportCode = varsToBeExported.reduce(
+            (code, varIdentifier) => {
+                let newExportLine = '';
+                if (languageFromMagic === 'js') {
+                    newExportLine = `Polyglot.export('${varIdentifier}', ${varIdentifier})`;
+                } else if (languageFromMagic === 'ruby') {
+                    newExportLine = `Polyglot.export('${varIdentifier}', ${varIdentifier})\n'an expression'`;
+                } else if (languageFromMagic === 'python') {
+                    newExportLine = `import polyglot;polyglot.export_value(${varIdentifier}, '${varIdentifier}')`;
+                } else if (languageFromMagic === 'R') {
+                    newExportLine = `export('${varIdentifier}', ${varIdentifier})`;
+                }
+
+                code.push(newExportLine);
+                return code;
+            }, []
+        );
+        const separator = languageFromMagic === 'js' ? ';' : '';
+        varExportCode = varExportCode.join(`${separator}\n`);
+
+        const augmentedCode = `${code}${separator}\n${varExportCode}${separator}`;
+        return Polyglot.eval(languageFromMagic, augmentedCode);
+    }
+
     return vm.runInThisContext(code);
 }
