diff --git a/node_modules/nel/lib/nel.js b/node_modules/nel/lib/nel.js
index f2391d6..05874d7 100755
--- a/node_modules/nel/lib/nel.js
+++ b/node_modules/nel/lib/nel.js
@@ -199,7 +199,9 @@ Session._command = paths.node;
  * @member {String[]}
  * @private
  */
-Session._args = ["--eval", server]; // --eval workaround
+// some useful flags for debugging, turn on if need be
+// Session._args = ["--polyglot", "--jvm", "--inspect", "--inspect.Suspend=false", "--experimental-options", "--inspect.Internal=true", "--eval", server]; // --eval workaround
+Session._args = ["--polyglot", "--jvm", "--eval", server]; // --eval workaround
 
 /**
  * Combination of a piece of code to be run within a session and all the
diff --git a/node_modules/nel/lib/server/context.js b/node_modules/nel/lib/server/context.js
index 1718dc3..72740ed 100644
--- a/node_modules/nel/lib/server/context.js
+++ b/node_modules/nel/lib/server/context.js
@@ -437,6 +437,16 @@ function defaultMimer(result) { // eslint-disable-line complexity
         };
     }
 
+    if (typeof result === "object") {
+        try {
+            result._toMime;
+        } catch (error) {
+            return {
+                "text/plain": "undefined"
+            };
+        }
+    }
+
     if (result === null) {
         return {
             "text/plain": "null"
@@ -455,7 +465,7 @@ function defaultMimer(result) { // eslint-disable-line complexity
 
     if (!("text/plain" in mime)) {
         try {
-            mime["text/plain"] = util.inspect(result);
+            mime["text/plain"] = util.inspect('' + result).replace(/^'(.*)'$/, '$1');;
         } catch (error) {}
     }
 
diff --git a/node_modules/nel/lib/server/main.js b/node_modules/nel/lib/server/main.js
index 6935d32..7f7f761 100755
--- a/node_modules/nel/lib/server/main.js
+++ b/node_modules/nel/lib/server/main.js
@@ -313,6 +313,15 @@ function inspect(object) {
     }
 }
 
-function run(code) {
-    return vm.runInThisContext(code);
+function run(rawCode) {
+    const POLYGLOT_MAGIC_PATTERN = '%polyglot ';
+
+    if(rawCode.startsWith(POLYGLOT_MAGIC_PATTERN)) {
+        const rawCodeSplit = rawCode.split('\n');
+        const languageFromMagic = rawCodeSplit[0].replace(POLYGLOT_MAGIC_PATTERN, '');
+        const code = rawCodeSplit.slice(1).join('\n');
+        return Polyglot.eval(languageFromMagic, code);
+    }
+
+    return vm.runInThisContext(rawCode);
 }
