diff --git a/node_modules/nel/lib/nel.js b/node_modules/nel/lib/nel.js
index f2391d6..05874d7 100755
--- a/node_modules/nel/lib/nel.js
+++ b/node_modules/nel/lib/nel.js
@@ -199,7 +199,9 @@ Session._command = paths.node;
  * @member {String[]}
  * @private
  */
-Session._args = ["--eval", server]; // --eval workaround
+// some useful flags for debugging, turn on if need be
+// Session._args = ["--polyglot", "--jvm", "--inspect", "--inspect.Suspend=false", "--experimental-options", "--inspect.Internal=true", "--eval", server]; // --eval workaround
+Session._args = ["--polyglot", "--jvm", "--eval", server]; // --eval workaround
 
 /**
  * Combination of a piece of code to be run within a session and all the
diff --git a/node_modules/nel/lib/server/main.js b/node_modules/nel/lib/server/main.js
index 6935d32..b98ccc4 100755
--- a/node_modules/nel/lib/server/main.js
+++ b/node_modules/nel/lib/server/main.js
@@ -313,6 +313,44 @@ function inspect(object) {
     }
 }
 
-function run(code) {
-    return vm.runInThisContext(code);
+function runInPolyglotContext(language, code) {
+    return Polyglot.eval(language, code);
+}
+
+function transformToStringRepresentation(language, result) {
+    const languageRepresentation = {
+        'python': 'import polyglot; repr(polyglot.import_value("__lastCellOutput"));',
+        'ruby': 'Polyglot.import("__lastCellOutput").inspect',
+        'R': 'toString(import("__lastCellOutput"))',
+        'js': 'JSON.stringify(Polyglot.import("__lastCellOutput"))'
+    }
+    Polyglot.export('__lastCellOutput', result);
+
+    if (languageRepresentation[language]) {
+        return Polyglot.eval(language, languageRepresentation[language]);
+    }
+
+    return Polyglot.eval(language, languageRepresentation.language);
+}
+
+function run(rawCode) {
+    const POLYGLOT_MAGIC_PATTERN = '%polyglot ';
+
+    if(rawCode.startsWith(POLYGLOT_MAGIC_PATTERN)) {
+        const rawCodeSplit = rawCode.split('\n');
+        const languageFromMagic = rawCodeSplit[0].replace(POLYGLOT_MAGIC_PATTERN, '');
+        const code = rawCodeSplit.slice(1).join('\n');
+
+        try {
+            let result = runInPolyglotContext(languageFromMagic, code);
+            if (!['number', 'string', 'boolean'].includes(typeof result)) {
+                result = transformToStringRepresentation(languageFromMagic, result);
+            }
+            return result;
+        } catch (e) {
+            return JSON.stringify(e);
+        }
+    }
+
+    return vm.runInThisContext(rawCode);
 }
